const std = @import("std");

pub fn getFlags() []const u8 {
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    defer _ = gpa.deinit();

    var args_iter = std.process.argsWithAllocator(gpa.allocator()) catch unreachable;
    defer args_iter.deinit();

    _ = args_iter.next(); // skip executable

    while (args_iter.next()) |arg| {
        std.debug.print("{c}\n", .{arg[1]});
    }

    return &[_]u8{};
}

pub const ArgType = union(type) {
    Flag: u8,
    Option: []const u8,
    Module,
};

pub fn Arg() type {
    return struct {
        const Self = @This();

        arg_type: ArgType,

        pub fn Flag() Self {}
    };
}

pub fn parseArgs() []ArgType {}
